---
description: 
globs: 
alwaysApply: false
---
# Flashcard Website Architecture

## File and Folder Structure

```
flashcard-website/
├── index.html
├── css/
│   └── styles.css
├── js/
│   └── script.js
└── data/
    └── questions.js
```

## File Descriptions

### `index.html`
The main HTML document that serves as the entry point for the application. Contains the basic page structure, card container, and navigation elements. Links to CSS and JavaScript files.

**Responsibilities:**
- Define the semantic structure of the page
- Include meta tags for responsive design
- Load external stylesheets and scripts
- Provide the container for dynamically generated cards

### `css/styles.css`
Contains all styling rules for the application, including card flip animations, responsive design, and visual appearance.

**Responsibilities:**
- Card styling and flip animation using CSS transforms
- Responsive layout for different screen sizes
- Typography and color scheme
- Hover effects and transitions
- Loading states and visual feedback

### `js/script.js`
The main JavaScript file that handles application logic, DOM manipulation, and user interactions.

**Responsibilities:**
- Initialize the application on page load
- Render question cards from data
- Handle card click events for flipping
- Manage card navigation (next/previous)
- Control application state transitions

### `data/questions.js`
Contains the hardcoded question and answer data in a structured format.

**Responsibilities:**
- Store all Q&A pairs in a JavaScript array/object
- Provide easy access to question data
- Allow for simple data modifications without touching logic
- Future-proof structure for database integration

## State Management

### Where State Lives
State is managed entirely in the browser's memory through JavaScript variables in `script.js`:

- **Current Card Index**: Tracks which question is currently displayed
- **Card Flip State**: Tracks whether each card is showing question or answer
- **Questions Data**: Loaded from `questions.js` and stored in memory
- **DOM References**: Cached references to frequently accessed elements

### State Structure
```javascript
const appState = {
    currentCardIndex: 0,
    isFlipped: false,
    questions: [], // Loaded from data/questions.js
    totalCards: 0
};
```

## Component Architecture

### Card Component (Virtual)
While not using a formal component system, the card functionality is encapsulated through:

- **Render Function**: Creates card HTML structure
- **Flip Handler**: Manages the flip animation and state
- **Update Function**: Changes card content when navigating

### Navigation System
- **Next/Previous Controls**: Allow users to cycle through cards
- **Progress Indicator**: Shows current position in the deck
- **Keyboard Support**: Arrow keys for navigation

## Data Flow

1. **Initialization**: `questions.js` is loaded and parsed into the application state
2. **Rendering**: Current question data flows from state to DOM elements
3. **User Interaction**: Click events trigger state updates (flip/navigation)
4. **Re-rendering**: State changes trigger DOM updates to reflect new content

## Service Connections

Since this is a simple client-side application, there are no external services initially. However, the architecture supports future enhancements:

### Current (No Services)
- All data stored locally in `questions.js`
- No network requests or external dependencies
- Purely client-side state management

### Future Service Integration Points
- **Data Service**: Replace `questions.js` with API calls
- **Progress Service**: Save user progress to localStorage/database
- **Analytics Service**: Track card performance and user behavior

## Key Design Decisions

### CSS-Based Animations
Card flipping is handled entirely through CSS transforms and transitions, keeping JavaScript minimal and ensuring smooth performance.

### Modular File Structure
Separation of concerns with dedicated folders for styles, scripts, and data makes the codebase maintainable and scalable.

### Progressive Enhancement
The basic HTML structure works without JavaScript, and features are layered on top for better accessibility and performance.

### Stateless Cards
Each card flip is independent, allowing users to flip multiple cards and navigate freely without complex state dependencies.